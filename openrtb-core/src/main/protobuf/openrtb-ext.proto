syntax = "proto2";

import "openrtb.proto";
option java_outer_classname = "OpenRtbExt";
package com.iabtechlab.openrtb.v2;

// Copyright 2019 IAB Tech Lab
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

message Transparency {
  // Domain of the entity that applied user parameters.
  optional string domain = 1;

  // Array for platform or sell-side use of any user parameters (using the list
  // provided by DSA Transparency Taskforce). Note; See definition and list of
  // possible user parameters as listed here, applied consistently in both bid
  // request and/or bid response.
  repeated int32 params = 2;


  // Convenience values used in the 'params' field.
  enum Params {
    Params_UNKNOWN = 0;

    // Information about the user, collected and used across contexts, that is
    // about the user's activity, interests, demographic information, or other
    // characteristics.
    PROFILING = 1;

    // Use of real-time information about the context in which the ad will be
    // shown, to show the ad, including information about the content and the
    // device, such as: device type and capabilities, user agent, URL, IP
    // address, non-precise geolocation data. Additionally, use of basic
    // cross-context information not based on user behavior or user
    // characteristics, for uses such as frequency capping, sequencing, brand
    // safety, anti-fraud.
    BASIC_ADVERTISING = 2;

    // The precise real-time geolocation of the user, i.e. GPS coordinates
    // within 500 meter radius precision.
    PRECISE_GEOLOCATION = 3;
  }
}

message DsaRequest {
  // Flag to indicate if DSA information should be made available. This will
  // signal if the bid request belongs to an Online Platform/VLOP, such that a
  // buyer should respond with DSA Transparency information based on the
  // pubrender value. 0 = Not required, 1 = Supported, bid responses with or
  // without DSA object will be accepted, 2 = Required, bid responses without
  // DSA object will not be accepted, 3 = Required, bid responses without DSA
  // object will not be accepted, Publisher is an Online Platform.
  optional int32 required = 1;

  // Flag to indicate if the publisher will render the DSA Transparency info.
  // This will signal if the publisher is able to and intends to render the
  // icon and display the DSA transparency info to the end user. 0 = Publisher
  // can't render, 1 = Publisher could render depending on adrender, 2 =
  // Publisher will render.
  optional int32 pubrender = 2;

  // Independent of pubrender, the publisher may need the transparency data for
  // audit purposes. 0 = do not send transparency data, 1 = optional to send
  // transparency data, 2 = send transparency data.
  optional int32 datatopub = 3;

  // Array of objects of the entities that applied user parameters and the
  // parameters they applied.
  repeated Transparency transparency = 4;
}

// Ad Exchange extensions for the Regs object.
message RegsExt {
  // Callers should fill this field solely based on whether the impression
  // will serve to an EEA user, based on information available to them. It
  // does not constitute legal guidance on GDPR.
  // Deprecated, recommended to use regs.gdpr instead.
  optional bool gdpr = 1 [deprecated = true];

  // OpenRTB Extension for US Privacy (CCPA)
  // Deprecated, recommended to use regs.us_privacy instead.
  optional string us_privacy = 2 [deprecated = true];

  // This is to be populated the value of the `Sec-GPC` HTTP header from
  // the user agent where the ad will be shown. Vendors with access to that
  // header must populate this field with that value. Vendors receiving an
  // OpenRTB request must populate this with the value of the same field 
  // from the request. No other usage of this field is valid. E.g., vendors 
  // are not to copy the GPC signal from the GPP string to this field.
  optional string gpc = 3;

  // Extension for DSA transparency information.
  optional DsaRequest dsa = 4; 
}

extend com.iabtechlab.openrtb.v2.BidRequest.Regs {
  // Extension key for the Adx Regs.ext
  optional RegsExt regs = 201;
}

// Ad Exchange extensions for the User object.
message UserExt {
  // Consent string as specified in the IAB Transparency and Consent
  // Framework v2.
  // Deprecated, recommended to use user.consent instead.
  optional string consent = 1 [deprecated = true];

  // Extended (third-party) identifiers for this user.
  repeated com.iabtechlab.openrtb.v2.BidRequest.User.EID eids = 2 [deprecated = true];
}

extend com.iabtechlab.openrtb.v2.BidRequest.User {
  // Extension key for User standard extensions.
  optional UserExt user = 202;
}

// This object represents both the links in the supply chain as well as an
// indicator whether or not the supply chain is complete.
message SupplyChain {
  // Flag indicating whether the chain contains all nodes involved in the
  // transaction leading back to the owner of the site, app or other medium of
  // the inventory, where 0 = no, 1 = yes.
  optional bool complete = 1;

  // Version of the supply chain specification in use, in the format of
  // “major.minor”. For example, for version 1.0 of the spec, use the string
  // “1.0”.
  optional string ver = 2;

  // Array of SupplyChainNode objects in the order of the chain. In a complete
  // supply chain, the first node represents the initial advertising system and
  // seller ID involved in the transaction, i.e. the owner of the site, app, or
  // other medium. In an incomplete supply chain, it represents the first known
  // node. The last node represents the entity sending this bid request.
  repeated com.iabtechlab.openrtb.v2.BidRequest.Source.SupplyChain.SupplyChainNode nodes = 3;

  // Extensions.
  extensions 100 to 9999;
}

// Ad Exchange extensions for the Source object.
message SourceExt {
  // The SupplyChain object enables buyers to see all parties who are selling or
  // reselling a given bid request.
  optional SupplyChain schain = 1 [deprecated = true];

  // Identifier of the OM SDK integration. This is the same as the "name"
  // parameter of the OMID Partner object.
  optional string omidpn = 2;

  // Version of the OM SDK integration. This is the same as the "versionString"
  // parameter of the OMID Partner object.
  optional string omidpv = 3;
}

extend com.iabtechlab.openrtb.v2.BidRequest.Source {
  // Extension key for Source standard extensions.
  optional SourceExt source = 203;
}

// SKAdNetwork object list attributes.
message SKAdNetworkList {
  // Implies a list of SKAdNetwork IDs up to and including this value.
  optional int32 max = 1;

  // List of registration IDs to be excluded from the IABTL shared list.
  repeated int32 excl = 2;

  // List of string SKAdNetwork IDs not included in the IABTL shared list.
  // The intention of addl is to be the permanent home for raw SKAdNetwork
  // IDs, migrating away from BidRequest.imp.ext.skadn.skadnetids.
  // Recommended that this list not exceed 10.
  repeated string addl = 3;

  // Extensions.
  extensions 100 to 9999;
}

// Publisher's SKAdNetwork information to support app installation
// attribution for iOS 14 and later. Apple's SKAdNetwork API helps
// advertisers measure ad-driven app installation by sending a postback
// to the ad network after a successful install. Publishers will need
// to configure supported ad networks in their app's property list
// (Info.plist) to allow an install to be attributed to the ad impression.
// For more info visit:
// https://developer.apple.com/documentation/storekit/skadnetwork
message SKAdNetworkRequest {
  // Version of SKAdNetwork supported. Dependent on both the OS version
  // and the SDK version.
  // Note: With the release of SKAdNetwork 2.1, this field is deprecated in
  // favor of the BidRequest.imp.ext.skadn.versions to support an array of
  // version numbers.
  optional string version = 1;

  // ID of publisher app in Apple's App Store. Should match app.bundle in
  // OpenRTB 2.x and app.storeid in AdCOM 1.x.
  optional string sourceapp = 2;

  // A subset of SKAdNetworkItem entries in the publisher app’s Info.plist
  // that are relevant to the DSP. Recommended that this list not exceed 10.
  // Note: BidRequest.imp.ext.skadn.skadnetlist.addl is the preferred method
  // to express raw SKAdNetwork IDs.
  repeated string skadnetids = 3;

  // Object containing the IABTL list definition.
  optional SKAdNetworkList skadnetlist = 4;

  // Array of strings containing the supported SKAdNetwork versions. Always
  // "2.0" or higher. Dependent on both the OS version and the SDK version.
  repeated string versions = 5;

  // Extensions.
  extensions 100 to 9999;
}

// Ad Exchange extensions for the Imp object.
message ImpExt {
  // Publisher's SKAdNetwork information.
  optional SKAdNetworkRequest skadn = 1;

  // To differentiate between impression opportunities
  // that support Protected Audience API on-device auction from
  // those that only support traditional server-side exchange auction
  enum AuctionEnvironment {
    // Traditional server-side auctions
    SERVER_SIDE_AUCTION = 0;
    // Requests with Protected Audience API support,
    // in which a contextual auction runs on the exchange's servers
    // and the interest group bidding and the final auction runs in the browser
    ON_DEVICE_INTEREST_GROUP_AUCTION = 1;
  }
  optional int32 ae = 2 [default = 0];
}

extend com.iabtechlab.openrtb.v2.BidRequest.Imp {
  // Extension key for Imp standard extensions.
  optional ImpExt imp = 204;
}

// Ad Exchange extensions for the Device object.
message DeviceExt {
  // (iOS Only) An integer passed to represent the app's app tracking
  // authorization status.
  enum Atts {
    NOT_DETERMINED = 0;
    RESTRICTED = 1;
    DENIED = 2;
    AUTHORIZED = 3;
  }
  optional int32 atts = 1;

  // IDFV of the device in that publisher. Listed as ifv to match ifa field
  // format.
  optional string ifv = 2;

  // Chrome-facilitated cookie deprecation testing label as received from Chrome.
  // https://developer.chrome.com/en/docs/privacy-sandbox/chrome-testing/
  optional string cdep = 3;
}

extend com.iabtechlab.openrtb.v2.BidRequest.Device {
  // Extension key for Device standard extensions.
  optional DeviceExt device = 205;
}

// SKAdNetwork fidelity attributes.
message SKAdNetworkFidelity {
  // The fidelity-type of the attribution to track.
  enum Fidelity {
    VIEW_THROUGH = 0;
    STOREKIT_RENDERED = 1;
  }
  optional int32 fidelity = 1;

  // An id unique to each ad response. Refer to Apple’s documentation for the
  // proper UUID format requirements:
  // https://developer.apple.com/documentation/storekit/skstoreproductparameteradnetworknonce
  optional string nonce = 2;

  // Unix time in millis string used at the time of signature.
  optional string timestamp = 3;

  // SKAdNetwork signature as specified by Apple.
  optional string signature = 4;

  // Extensions.
  extensions 100 to 9999;
}

// Advertiser's SKAdNetwork information to support app installation
// attribution for iOS 14 and later.  Apple's SKAdNetwork API helps
// advertisers measure ad-driven app installation by sending a postback
// to the ad network after a successful install. Ad networks will need
// to send their network ID and signed advertiser information to allow
// an install to be attributed to the ad impression.
// For more info visit:
// https://developer.apple.com/documentation/storekit/skadnetwork
message SKAdNetworkResponse {
  // Version of SKAdNetwork desired. Must be 2.0 or above.
  optional string version = 1;

  // Ad network identifier used in signature. Should match one of the items
  // in the skadnetids array in the request.
  optional string network = 2;

  // Campaign ID compatible with Apple's spec. As of 2.0, should be an
  // integer between 1 and 100, expressed as a string.
  optional string campaign = 3;

  // ID of advertiser's app in Apple's app store. Should match
  // BidResponse.seatbid.bid.bundle.
  optional string itunesitem = 4;

  // An id unique to each ad response. Refer to Apple’s documentation for
  // the proper UUID format requirements.
  // Note: With the release of SKAdNetwork v2.2, this field is deprecated in
  // favor of the BidResponse.seatbid.bid.ext.skadn.fidelities.nonce to support
  // multiple fidelity-types.
  optional string nonce = 5;

  // ID of publisher’s app in Apple’s app store. Should match
  // BidRequest.imp.ext.skad.sourceapp.
  optional string sourceapp = 6;

  // Unix time in millis used at the time of signature generation.
  // Note: With the release of SKAdNetwork 2.2, this field is deprecated in
  // favor of the BidResponse.seatbid.bid.ext.skadn.fidelities.timestamp to
  // support multiple fidelity-types.
  optional string timestamp = 7;

  // SKAdNetwork signature as specified by Apple.
  // Note: With the release of SKAdNetwork 2.2, this field is deprecated in
  // favor of the BidResponse.seatbid.bid.ext.skadn.fidelities.signature to
  // support multiple fidelity-types.
  optional string signature = 8;

  // Supports multiple fidelity types introduced in SKAdNetwork v2.2.
  repeated SKAdNetworkFidelity fidelities = 9;

  // Extensions.
  extensions 100 to 9999;
}

message DsaResponse {
  // Advertiser Transparency: Free UNICODE text string with a name of whose
  // behalf the ad is displayed. Maximum 100 characters.
  optional string behalf = 1;

  // Advertiser Transparency: Free UNICODE text string of who paid for the ad.
  // Must always be included even if it's the same as what is listed in the
  // behalf attribute. Maximum 100 characters.
  optional string paid = 2;

  // Array of objects of the entities that applied user parameters and the
  // parameters they applied.
  repeated Transparency transparency = 3;

  // Flag to indicate that buyer/advertiser will render their own DSA
  // transparency information inside the creative. 0 = buyer/advertiser will
  // not render, 1 = buyer/advertiser will render.
  optional bool adrender = 4;
}

// Ad Exchange extensions for the Bid object.
message BidExt {
  // Advertiser's SKAdNetwork information.
  optional SKAdNetworkResponse skadn = 1;

  // Extension for DSA transparency information.
  optional DsaResponse dsa = 2;  
}

extend com.iabtechlab.openrtb.v2.BidResponse.SeatBid.Bid {
  // Extension key for Bid standard extensions.
  optional BidExt bid = 206;
}

// Ad Exchange extensions for the Data object.
message DataExt {
  // Taxonomy for the segments in this Data object.
  // Refer to enum SegmentTaxonomy (to be added) for generic values.
  optional int32 segtax = 1;
}

extend com.iabtechlab.openrtb.v2.BidRequest.Data {
  // Extension key for Data standard extensions.
  optional DataExt data = 207;
}
